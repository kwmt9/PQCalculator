<div class="input-group">
    <div class="form-outline">
        <input @bind="InputValue" 
               @oninput="SearchInputOnChanged" 
               @onkeydown="OnKeyDown"
               @onfocusout="FocusOut"
               @onfocusin="FocusIn"
               placeholder="@Placeholder"
               type="search" class="form-control input-width" />
    </div>
    @if (IsOpen) {
        <div class="dropdown-menu autocomplete input-width justify-content-center">
            @for (int i = 0; i < AutoComplete?.Count; i++) {
                var hoverClass = i == SelectedIndex ? "hover" : "";
                var item = AutoComplete[i];
                var index = i;
                <label class="dropdown-item @hoverClass" @onmousedown="(() => OnClick(index))" @onmouseover="(() => SelectItem(index))">@item</label>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public List<string>? StringList { get; set; }
    [Parameter]
    public EventCallback<string> TextChanged { get; set; }
    [Parameter]
    public string? Placeholder { get; set; }

    List<string>? AutoComplete { get; set; }
    public string? InputValue { get; set; }

    int SelectedIndex = -1;
    bool IsOpen { get { return AutoComplete?.Any() == true; } }

    public void SearchInputOnChanged(ChangeEventArgs e) {
        InputValue = e.Value as string;
                TextChanged.InvokeAsync(InputValue);

        CreateAutoComplete();
    }
    void CreateAutoComplete() {
        if (string.IsNullOrEmpty(InputValue)) {
            AutoComplete = StringList?.ToList();
        }
        else {
            AutoComplete = StringList?.Where(unit => unit.Contains(InputValue)).ToList();
        }
        //Console.WriteLine(AutoComplete?.Count);
    }
    void OnKeyDown(KeyboardEventArgs e) {
        if (e.Key == "ArrowDown") {
            SelectItem(SelectedIndex + 1);
        }
        else if (e.Key == "ArrowUp") {
            SelectItem(SelectedIndex - 1);
        }
        else if (e.Key == "Enter") {
            OnClick(SelectedIndex);
        }
        else if (e.Key == "Escape") {
            FocusOut();
        }
    }

    void SelectItem(int index) {
        if (!IsOpen || AutoComplete == null) { return; }

        SelectedIndex = index;
        int max = (AutoComplete.Count - 1);
        SelectedIndex = System.Math.Clamp(SelectedIndex, -1, max);
    }
    void OnClick(int index) {
        if (index == -1) { return; }
        SelectedIndex = index;
        InputValue = AutoComplete?[SelectedIndex];
        AutoComplete = default;
        SelectedIndex = -1;
        TextChanged.InvokeAsync(InputValue);
    }
    void FocusOut() {
        AutoComplete = default;
        SelectedIndex = -1;
    }
    void FocusIn() {
        CreateAutoComplete();
    }
}